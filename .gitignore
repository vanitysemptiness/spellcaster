# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

#######
Python
#######

.venv

# Byte-compiled / optimized / DLL files
__pycache__/
*.pyc
*.pyo
*.pyd

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:

#######
Rust
#######

# Generated files
target/

# Rust artifacts
Cargo.lock
target/

# Visual Studio Code configuration
.vscode/

# IntelliJ Rust
.idea/

# Rust Language Server
rls/

# Cargo.toml.orig and Cargo.lock.orig
Cargo.toml.orig
Cargo.lock.orig

# Mac OS
.DS_Store

# Windows
Thumbs.db
desktop.ini

### REACT TS ###

# Dependencies
node_modules/
package-lock.json
yarn.lock

# Build output
build/
dist/

# Testing
coverage/

# IDE/Editor configurations
.vscode/
.idea/
.sublime-project

# Temporary files
*.ts.snap
*.cache

# Environment variables
.env
.env.local
.env.development
.env.production

# Logs
npm-debug.log
yarn-debug.log
yarn-error.log

# Other
README.md

# Generated files for CI/CD
# Add or remove based on your specific setup
.github/workflows/

# Local development server configuration
# (e.g., webpack dev server config)
webpack.dev.js

# Optional: ignore specific files or folders
# my-secret-file.txt
# my-ignored-folder/
